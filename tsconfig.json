{
  /* Visit https://www.typescriptlang.org/tsconfig to read more about this file */
  "$schema": "https://json.schemastore.org/tsconfig",

  /*
   * Specify another configuration file to inherit from.
   * Default: false
   */
  // "extends": "tsconfig.base.json",

  "compilerOptions": {
    /* Type Checking */

    /*
     * Disable error reporting for unreachable code.
     * Recommended: false
     * Default: undefined
     */
    // "allowUnreachableCode": true,

    /*
     * Disable error reporting for unused labels.
     * Recommended: false
     * Default: undefined
     */
    // "allowUnusedLabels": true,

    /*
     * Ensure 'use strict' is always emitted.
     * Recommended: true
     * Default: true if strict, false otherwise.
     */
    // "alwaysStrict": true,

    /*
     * Interpret optional property types as written, rather than adding
     * 'undefined'.
     * Recommended: true
     * Default: false
     */
    "exactOptionalPropertyTypes": true,

    /*
     * Enable error reporting for fallthrough cases in switch statements.
     * Recommended: false
     * Default: false
     */
    // "noFallthroughCasesInSwitch": true,

    /*
     * Enable error reporting for expressions and declarations with an implied
     * `any` type..
     * Recommended: true
     * Default: true if strict, false otherwise.
     */
    // "noImplicitAny": true,

    /*
     * Ensure overriding members in derived classes are marked with an override
     * modifier.
     * Recommended: false
     * Default: false
     */
    // "noImplicitOverride": true,

    /*
     * Enable error reporting for codepaths that do not explicitly return in a
     * function.
     * Recommended: false
     * Default: false
     */
    // "noImplicitReturns": true,

    /*
     * Enable error reporting when `this` is given the type `any`.
     * Recommended: true
     * Default: true if strict, false otherwise.
     */
    // "noImplicitThis": true,

    /*
     * Enforces using indexed accessors for keys declared using an indexed type.
     * Recommended: false
     * Default: none
     */
    // "noPropertyAccessFromIndexSignature": true,

    /*
     * Include 'undefined' in index signature results.
     * Recommended: false
     * Default: none
     */
    // "noUncheckedIndexedAccess": true,

    /*
     * Enable error reporting when a local variables aren't read.
     * Recommended: false
     * Default: none
     */
    // "noUnusedLocals": true,

    /*
     * Raise an error when a function parameter isn't read.
     * Recommended: false
     * Default: none
     */
    // "noUnusedParameters": true,

    /*
     * Enable all strict type-checking options.
     * Recommended: true
     * Default: false
     */
    "strict": true,

    /*
     * Check that the arguments for `bind`, `call`, and `apply` methods match
     * the original function.
     * Recommended: true
     * Default: true if strict, false otherwise.
     */
    // "strictBindCallApply": true,

    /*
     * When assigning functions, check to ensure parameters and the return
     * values are subtype-compatible.
     * Recommended: true
     * Default: true if strict, false otherwise.
     */
    // "strictFunctionTypes": true,

    /*
     * When type checking, take into account `null` and `undefined`.
     * Recommended: true
     * Default: true if strict, false otherwise.
     */
    // "strictNullChecks": true,

    /*
     * Check for class properties that are declared but not set in the
     * constructor.
     * Recommended: true
     * Default: true if strict, false otherwise.
     */
    // "strictPropertyInitialization": true,

    /*
     * Type catch clause variables as 'unknown' instead of 'any'.
     * Recommended: false
     * Default: true if strict, false otherwise.
     */
    // "useUnknownInCatchVariables": true,

    /* Modules */

    /*
     * Enable importing files with any extension, provided a declaration file is
     * present.
     * Recommended: false
     */
    // "allowArbitraryExtensions": true,

    /*
     * Allow imports to include TypeScript file extensions. Requires
     * '--moduleResolution bundler' and either '--noEmit' or
     * '--emitDeclarationOnly' to be set.
     * Recommended: false
     */
    // "allowImportingTsExtensions": true,

    /*
     * Allow accessing UMD globals from modules.
     * Recommended: false
     * Default: false
     */
    // "allowUmdGlobalAccess": true,

    /*
     * Specify the base directory to resolve non-relative module names.
     * Recommended: false
     */
    // "baseUrl": "/path/to/base/directory/",

    /*
     * Specify what module code is generated.
     * Recommended: false
     * Default: CommonJS if target is ES3 or ES5, ES6/ES2015 otherwise.
     */
    // "module": "commonjs",

    /*
     * Specify how TypeScript looks up a file from a given module specifier.
     * Recommended: false
     * Default: Classic if module is AMD, UMD, System or ES6/ES2015, Matches if
     * module is node12 or nodenext, Node otherwise.
     */
    "moduleResolution": "node",

    /*
     * Disallow import's, require's or <reference>'s from expanding the
     * number of files TypeScript should add to a project.
     * Recommended: false
     * Default: false
     */
    // "noResolve": true,

    /*
     * Specify a set of entries that re-map imports to additional lookup
     * locations.
     * Recommended: false
     */
    // "paths": {},

    /*
     * Enable importing .json files.
     * Recommended: false
     * Default: false
     */
    // "resolveJsonModule": true,

    /*
     * Specify the root folder within your source files.
     * Recommended: false
     * Default: Computed from the list of input files.
     */
    // "rootDir": "/path/to/root/folder/",

    /*
     * Allow multiple folders to be treated as one when resolving modules.
     * Recommended: false
     * Default: Computed from the list of input files.
     */
    // "rootDirs": [],

    /*
     * Specify multiple folders that act like `./node_modules/@types`.
     * Recommended: false
     * Default: All visible '@types' packages.
     */
    // "typeRoots": [],

    /*
     * Specify type package names to be included without being referenced in a
     * source file.
     * Recommended: false
     * Default: All visible '@types' packages.
     */
    "types": ["eslint", "jest", "node"],

    /* Emit */

    /*
     * Generate .d.ts files from TypeScript and JavaScript files in your project.
     * Recommended: false
     * Default: true if composite, false otherwise.
     */
    // "declaration": true,

    /*
     * Specify the output directory for generated declaration files.
     * Recommended: false
     */
    // "declarationDir": "/path/to/declaration/files/",

    /*
     * Create sourcemaps for d.ts files.
     * Recommended: false
     * Default: false
     */
    // "declarationMap": true,

    /*
     * Emit more compliant, but verbose and less performant JavaScript for
     * iteration.
     * Recommended: false
     * Default: false
     */
    // "downlevelIteration": true,

    /*
     * Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.
     * Recommended: false
     * Default: false
     */
    // "emitBOM": true,

    /*
     * Only output d.ts files and not JavaScript files.
     * Recommended: false
     * Default: false
     */
    // "emitDeclarationOnly": true,

    /*
     * Allow importing helper functions from tslib once per project, instead of
     * including them per-file.
     * Recommended: false
     * Default: false
     */
    "importHelpers": true,

    /*
     * Specify emit/checking behavior for imports that are only used for types.
     * Recommended: false
     * Default: remove
     */
    // "importsNotUsedAsValues": "remove",

    /*
     * Include sourcemap files inside the emitted JavaScript.
     * Recommended: false
     * Default:
     */
    // "inlineSourceMap": true,

    /*
     * Include source code in the sourcemaps inside the emitted JavaScript.
     * Recommended: false
     * Default: false
     */
    // "inlineSources": true,

    /*
     * Specify the location where debugger should locate map files instead of
     * generated locations.
     * Recommended: false
     */
    // "mapRoot": "",

    /*
     * Set the newline character for emitting files.
     * Recommended: false
     * Default: Platform specific.
     */
    // "newLine": "lf",

    /*
     * Disable emitting files from a compilation.
     * Recommended: false
     * Default: false
     */
    "noEmit": true,

    /*
     * Disable generating custom helper functions like `__extends` in compiled
     * output.
     * Recommended: false
     * Default: false
     */
    // "noEmitHelpers": true,

    /*
     * Disable emitting files if any type checking errors are reported.
     * Recommended: false
     * Default: false
     */
    // "noEmitOnError": true,

    /*
     * Specify an output folder for all emitted files.
     * Recommended: false
     * Default: Same directory as the .ts files they were generated from.
     */
    // "outDir": "/path/to/output/folder/",

    /*
     * Specify a file that bundles all outputs into one JavaScript file.
     * If `declaration` is true, also designates a file that bundles all `.d.ts`
     * output.
     * Recommended: false
     */
    // "outFile": "bundle.js",

    /*
     * Disable erasing `const enum` declarations in generated code.
     * Recommended: false
     * Default: true if isolatedModules, false otherwise.
     */
    // "preserveConstEnums": false,

    /*
     * Disable emitting comments.
     * Recommended: false
     * Default: false
     */
    // "removeComments": true,

    /*
     * Create source map files for emitted JavaScript files.
     * Recommended: false
     * Default: false
     */
    // "sourceMap": true,

    /*
     * Specify the root path for debuggers to find the reference source code.
     * Recommended: false
     */
    // "sourceRoot": "/path/to/source/code/",

    /*
     * Disable emitting declarations that have `@internal` in their JSDoc
     * comments.
     * Recommended: false
     */
    // "stripInternal": true,

    /* JavaScript Support */

    /*
     * Allow JavaScript files to be a part of your program. Use the `checkJS`
     * option to get errors from these files.
     * Recommended: false
     * Default: false
     */
    "allowJs": true,

    /*
     * Enable error reporting in type-checked JavaScript files.
     * Recommended: false
     * Default: false
     */
    "checkJs": true,

    /*
     * Specify the maximum folder depth used for checking JavaScript files from
     * node_modules. Only applicable with allowJs.
     * Recommended: false
     * Default: 0
     */
    // "maxNodeModuleJsDepth": 1,

    /* Editor Support */

    /*
     * Remove the upper limit to the amount of memory TypeScript will allocate.
     * Recommended: false
     * Default: false
     */
    // "disableSizeLimit": true,

    /*
     * List of language service plugins to run inside the editor.
     * Recommended: false
     */
    // "plugins": [],

    /* Interop Constraints */

    /*
     * Allow 'import x from y' when a module doesn't have a default export.
     * Recommended: false
     * Default: true if esModuleInterop is enabled, module is system, or
     * moduleResolution is bundler, false otherwise.
     */
    // "allowSyntheticDefaultImports": true,

    /*
     * Emit additional JavaScript to ease support for importing CommonJS modules.
     * This enables `allowSyntheticDefaultImports` for type compatibility.
     * Recommended: true
     * Default: true if module is node16 or nodenext, false otherwise.
     */
    "esModuleInterop": true,

    /*
     * Disable correct casing for imports.
     * Recommended: true
     * Default: true
     */
    // "forceConsistentCasingInFileNames": false,

    /*
     * Ensure that each file can be safely transpiled without relying on other
     * imports.
     * Recommended: false
     * Default: false
     */
    // "isolatedModules": true,

    /*
     * Disable resolving symlinks to their realpath. This correlates to the same
     * flag in node.
     * Recommended: false
     * Default: false
     */
    // "preserveSymlinks": true,

    /* Language and Environment */

    /*
     * Emit design-type metadata for decorated declarations in source files.
     * Recommended: false
     */
    // "emitDecoratorMetadata": true,

    /*
     * Enable experimental support for TC39 stage 2 draft decorators.
     * Recommended: false
     */
    // "experimentalDecorators": true,

    /*
     * Specify what JSX code is generated.
     * Recommended: false
     */
    // "jsx": "preserve",

    /*
     * Specify the JSX factory function used when targeting React JSX emit, e.g.
     * 'React.createElement' or 'h'.
     * Recommended: false
     * Default: React.createElement
     */
    // "jsxFactory": "",

    /*
     * Specify the JSX Fragment reference used for fragments when targeting
     * React JSX emit e.g. 'React.Fragment' or 'Fragment'.
     * Recommended: false
     * Default: React.Fragment
     */
    // "jsxFragmentFactory": "",

    /*
     * Specify module specifier used to import the JSX factory functions when
     * using `jsx": react-jsx*`.
     * Recommended: false
     * Default: react
     */
    // "jsxImportSource": "",

    /*
     * Specify a set of bundled library declaration files that describe the
     * target runtime environment.
     * Recommended: false
     */
    // "lib": [],

    /*
     * Disable including any library files, including the default `lib.d.ts`.
     * Recommended: false
     * Default: false
     */
    // "noLib": true,

    /*
     * Specify the object invoked for `createElement`. This only applies when
     * targeting `react` JSX emit.
     * Recommended: false
     * Default: React
     */
    // "reactNamespace": "",

    /*
     * Set the JavaScript language version for emitted JavaScript and include
     * compatible library declarations.
     * Recommended: false
     * Default: ES3
     */
    // "target": "",

    /*
     * Emit ECMAScript-standard-compliant class fields.
     * Recommended: false
     * Default: true if target is ES2022 or higher, including ESNext, false
     * otherwise.
     */
    // "useDefineForClassFields": true,

    /* Compiler Diagnostics */

    /*
     * Print names of files which TypeScript sees as a part of your project and
     * the reason they are part of the compilation.
     * Recommended: false
     */
    // "explainFiles": true,

    /*
     * Enable to discover where TypeScript is spending its time when compiling.
     * Recommended: false
     */
    // "extendedDiagnostics": true,

    /*
     * Print names of generated files part of the compilation to the terminal.
     * Recommended: false
     */
    // "listEmittedFiles": true,

    /*
     * Print names of files part of the compilation.
     * Recommended: false
     */
    // "listFiles": true,

    /*
     * Print information about the resolution process for each processed file.
     * Recommended: false
     */
    // "traceResolution": true,

    /* Projects */

    /*
     * Enable constraints that allow a TypeScript project to be used with
     * project references.
     * Recommended: false
     */
    // "composite": true,

    /*
     * Reduce the number of projects loaded automatically by TypeScript.
     * Recommended: false
     */
    // "disableReferencedProjectLoad": true,

    /*
     * Opt a project out of multi-project reference checking when editing.
     * Recommended: false
     */
    // "disableSolutionSearching": true,

    /*
     * Disable preferring source files instead of declaration files when
     * referencing composite projects.
     * Recommended: false
     */
    // "disableSourceOfProjectReferenceRedirect": true,

    /*
     * Enable incremental compilation
     * Recommended: false
     * Default: true if composite, false otherwise.
     */
    // "incremental": true,

    /*
     * Specify the folder for .tsbuildinfo incremental compilation files.
     * Recommended: false
     * Default: .tsbuildinfo
     */
    // "tsBuildInfoFile": "/path/to/build/info/files/",

    /* Completeness */

    /*
     * Skip type checking .d.ts files that are included with TypeScript.
     * Recommended: false
     * Default: false
     */
    // "skipDefaultLibCheck": true,

    /*
     * Skip type checking all .d.ts files.
     * Recommended: true
     * Default: false
     */
    "skipLibCheck": true
  },

  "typeAcquisition": {
    /*
     * Enable automatic type acquisition in JavaScript projects.
     * Recommended: false
     * Default: false
     */
    // "enable": true,
    /*
     * Specify which types should be used from DefinitelyTyped.
     * Recommended: false
     */
    // "include": [],
    /*
     * Disable the type-acquisition for a certain module in JavaScript projects.
     * Recommended: false
     */
    // "exclude": [],
    /*
     * Disable TypeScript’s type acquisition based on filenames in a project.
     * Recommended: false
     */
    // "disableFilenameBasedTypeAcquisition": true
  },

  /*
   * Specify an allowlist of files to include in the program. An error occurs if
   * any of the files can’t be found.
   * Recommended: false
   * Default: false
   */
  // "files": [],

  /*
   * Specify an array of filenames or patterns to include in the program. These
   * filenames are resolved relative to the directory containing this
   * `tsconfig.json` file.
   * Recommended: false
   * Default: [] if files is specified, ** otherwise.
   */
  "include": [
    "configs/**/*.js",
    "tests/**/*.js",
    ".eslintrc.js",
    "jest.config.js"
  ]

  /*
   * Specify an array of filenames or patterns that should be skipped when
   * resolving `include`.
   * Recommended: false
   * Default: node_modules, bower_components, jspm_packages and outDir.
   */
  // "exclude": [],

  /*
   * Specify an array of objects that specifies projects to reference.
   * Recommended: false
   * Default: false
   */
  // "references": []
}
